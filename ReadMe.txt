- The source code should contain the following folders:
	src			: contains implementations (.cpp files)
	include			: contains headers (.h files)
	testcases		: contains input bases for HybridAttack
	reduced_basis		: contains reduced bases
	MPI-output		: an output folder is generated for each MPI run.
					Each folder contains as many text files as the number of MPI processes.

- In order to compile and run the program, the following libraries / compiler are needed
OpenMPI (mpic++)
NTL (thread-safe compiled)
GMP
Intel TBB

- To generate an input basis for HybridAttack, run ./GenerateInputHybridAttack with the following arguments
	m			: as described in paper
	n			: as described in paper
	q			: as described in paper
	output			: name as well as path for output
For example, run
./GenerateInputHybridAttack -m 160 -n 80 -q 521 -output test13.txt
will generate an output named test13.txt containing the matrix A, a vector b, a vector error.

- For different values of r, code needs to be recompiled.
A script called recompile.sh can be found in the source code folder.
In recompile.sh, changing m, r to desired value and run ./recompile.sh in order to recompile code for the given value of m,r.

- For running HybridAttack, the following arguments are needed
	r			: as described in paper
	c			: as described in paper
	input			: path to basis generated by GenerateInputHybridAttack
	output			: path to output folder (for MPI run)
	numthread		: the number of OMP threads
	beta			: blocksize for BKZ
For example, running HybridAttack in slurm
	
	currentDate=$(date '+%d_%m_%Y_%T.%6N')
	#basisOutput="reduced_basis/$currentDate"
	mpiOutput="MPI-output/$currentDate"
	#mkdir $basisOutput
	mkdir $mpiOutput
	instance="srun ./HybridAttack -input testcases/test13.txt -beta 20 -r 20 -c 5 -numthread 8 -output $currentDate"
	$instance

Bevor executing HybridAttack with MPI (by calling srun in slurm), this script creates a folder named as the current system 
time for writing the output streams of MPI processes.
HybridAttack get an input basis named test13.txt and runs for beta = 20, r = 20, c = 5 and 8 OMP threads in each MPI process. 
The naming convention for the output of a MPI process with process ID procID is output_proc_procID.txt.

Notes:
- In this running mode, each MPI process starts by reading the input basis, then does BKZ reduction. On a reduced basis,
a test for a necessary condition is performed to check whether it makes sense to run the attack on this reduced basis or not.
Then, if the test is passed, each MPI process parallely guesses with the given number of OMP threads.
The program is terminated once a MPI process finds a vector.
The MPI process, which is terminated before finding a vector, outputs a result vector with all zero entries, i.e. [0 ... 0].
The process finding the appropriate vector outputs a binary vector, i.e. [0 1 (0 1)] 
 
- The program has two main routines, so-called precomputing and hybridAttack defined in src/Attack.cpp.
