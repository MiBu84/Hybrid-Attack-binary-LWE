- The source code should contain the following folders:
	src			: contains implementations (.cpp files)
	include			: contains headers (.h files)
	testcases		: contains input bases for HybridAttack
	reduced_basis		: contains reduced bases
	MPI-output		: an output folder is generated for each MPI run.
					Each folder contains as many text files as the number of MPI processes.
Notes:
If MPI-output folder is not present, it must be created otherwise output from MPI is loss.

- In order to compile and run the program, the following libraries / compiler are needed
OpenMPI (mpic++)
NTL (thread-safe compiled)
GMP
Intel TBB

- To generate an input basis with binary error, i.e. [0 1 (0 1)], for HybridAttack, run ./GenerateInputHybridAttackBinaryError with the following arguments
	m			: as described in paper
	n			: as described in paper
	q			: as described in paper
	output			: name as well as path for output
For example, run
./GenerateInputHybridAttackBinaryError -m 160 -n 80 -q 521 -output test13.txt
will generate an output named test13.txt containing the matrix A, a vector b, a vector error in form [0 1 (0 1)]

- To generate an input basis with binary random error, i.e. [1 0 1 1 1 0..], run ./GenerateInputHybridAttackRandomError with arguments similar
to that of GenerateInputHybridAttackBinaryError.

- For different values of r, code needs to be recompiled.
A script called recompile.sh can be found in the source code folder.
In addition, to run HybridAttack in different modes, choosing 

- Mode 1:
	(1) Basis is reduced without permutation and randomisation.
	(2) The reduced basis is fed to a test for necessity condition. The test checks whether the hybrid attack could succeed on this given basis.
		If the test is passed, return basis. Else repeat step (1).
	(3) Running attack based on the reduced basis.

- Mode 2: 
	(1) Basis is permutated and multiplied with a unimodular before being reduced.
	(2) The reduced basis is fed to a test for necessity condition. The test checks whether the hybrid attack could succeed on this given basis.
		If the test is passed, return basis. Else repeat step (1).
		 
Notes: this mode with permutation and unimodular matrix is used for input basis with binary randome error which is generated by GenerateInputHybridAttackRandomError.
Attack is not executed, only the time for precomputing is measured.
For example, input basis test17.txt found in folder testcases.

- Mode 3:
	(1) Reading reduced basis.
	(2) Running attack.

- Mode 4:
	Processes with even IDs do BKZ before run attack.
	Processes with odd IDs ignore BKZ, simply read reduced basis and begin with attack.

For mode 3 and 4: the naming convention for the reduced basis is: [name_of_testcase(without .txt)]_r_[value_of_r]_beta_[value_of_beta].txt
For example, if the arguments of HybridAttack is -input testcases/test13.txt -m 160 -beta 20 -r 20 then the reduced basis must be 
found in folder reduced_basis and has the name test13_r_20_beta_20.txt.

In recompile.sh, changing m, r to desired value and run ./recompile.sh with the following arguments:
	m		: as described in paper
	r		: as described in paper
	mode		: as described above
For example, 

./recompile.sh -m 160 -r 20 -mode 1 

will compile the program for m = 160, r = 20 and choosing mode 1.

- In order to output the reduced basis to an output, choosing mode 4, 
remove comments in the following lines
//	output_PrecomputedBasis_ToFile(B, B_1_reduced_transposed, B_reduced_gs,euclid_norm);
//	return;
(which are found at the end of the procedure precomputing in src/Attack.cpp)
recompiling the program with the chosen mode and running the program with 1 MPI process.
The reduced basis with the naming convention mentioned above is created in folder reduced_basis.
If there is no need to output a reduced basis to a text file, these two lines should be again commented out.

- For running HybridAttack, the following arguments are needed
	m			: as described in paper
	r			: as described in paper
	c			: as described in paper
	input			: path to basis generated by GenerateInputHybridAttack
	output			: path to output folder (for MPI run)
	numthread		: the number of OMP threads
	beta			: blocksize for BKZ
For example, running HybridAttack in slurm
	
	currentDate=$(date '+%d_%m_%Y_%T.%6N')
	#basisOutput="reduced_basis/$currentDate"
	mpiOutput="MPI-output/$currentDate"
	#mkdir $basisOutput
	mkdir $mpiOutput
	instance="srun ./HybridAttack -input testcases/test13.txt -m 160 -beta 20 -r 20 -c 5 -numthread 8 -output $currentDate"
	$instance

Bevor executing HybridAttack with MPI (by calling srun in slurm), this script creates a folder named as the current system 
time for writing the output streams of MPI processes.
HybridAttack get an input basis named test13.txt and runs for m=160,beta = 20, r = 20, c = 5 and 8 OMP threads in each MPI process. 
The naming convention for the output of a MPI process with process ID procID is output_proc_procID.txt.

Notes:
- The program has two main routines, so-called precomputing and hybridAttack defined in src/Attack.cpp.
- For demo of mode 1,3,4, compile and run HybridAttack with the arguments: -input testcases/test13.txt -m 160 -beta 20 -r 20 -c 5
- For demo of mode 2, compile and run HybridAttack with the arguments: -input testcases/test17.txt -m 160 -beta 3 -r 4 -c 1
